# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Imovel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, nome: str=None, endereo: str=None, description: str=None, status: str=None, caracteristicas: str=None, tipo: str=None, finalidade: str=None, idimobiliaria: int=None):  # noqa: E501
        """Imovel - a model defined in Swagger

        :param id: The id of this Imovel.  # noqa: E501
        :type id: int
        :param nome: The nome of this Imovel.  # noqa: E501
        :type nome: str
        :param endereo: The endereo of this Imovel.  # noqa: E501
        :type endereo: str
        :param description: The description of this Imovel.  # noqa: E501
        :type description: str
        :param status: The status of this Imovel.  # noqa: E501
        :type status: str
        :param caracteristicas: The caracteristicas of this Imovel.  # noqa: E501
        :type caracteristicas: str
        :param tipo: The tipo of this Imovel.  # noqa: E501
        :type tipo: str
        :param finalidade: The finalidade of this Imovel.  # noqa: E501
        :type finalidade: str
        :param idimobiliaria: The idimobiliaria of this Imovel.  # noqa: E501
        :type idimobiliaria: int
        """
        self.swagger_types = {
            'id': int,
            'nome': str,
            'endereo': str,
            'description': str,
            'status': str,
            'caracteristicas': str,
            'tipo': str,
            'finalidade': str,
            'idimobiliaria': int
        }

        self.attribute_map = {
            'id': 'id',
            'nome': 'nome',
            'endereo': 'endereço',
            'description': 'description',
            'status': 'status',
            'caracteristicas': 'caracteristicas',
            'tipo': 'tipo',
            'finalidade': 'finalidade',
            'idimobiliaria': 'idimobiliaria'
        }

        self._id = id
        self._nome = nome
        self._endereo = endereo
        self._description = description
        self._status = status
        self._caracteristicas = caracteristicas
        self._tipo = tipo
        self._finalidade = finalidade
        self._idimobiliaria = idimobiliaria

    @classmethod
    def from_dict(cls, dikt) -> 'Imovel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Imovel of this Imovel.  # noqa: E501
        :rtype: Imovel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Imovel.


        :return: The id of this Imovel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Imovel.


        :param id: The id of this Imovel.
        :type id: int
        """

        self._id = id

    @property
    def nome(self) -> str:
        """Gets the nome of this Imovel.


        :return: The nome of this Imovel.
        :rtype: str
        """
        return self._nome

    @nome.setter
    def nome(self, nome: str):
        """Sets the nome of this Imovel.


        :param nome: The nome of this Imovel.
        :type nome: str
        """
        if nome is None:
            raise ValueError("Invalid value for `nome`, must not be `None`")  # noqa: E501
        if nome is not None and len(nome) > 100:
            raise ValueError("Invalid value for `nome`, length must be less than or equal to `100`")  # noqa: E501

        self._nome = nome

    @property
    def endereo(self) -> str:
        """Gets the endereo of this Imovel.


        :return: The endereo of this Imovel.
        :rtype: str
        """
        return self._endereo

    @endereo.setter
    def endereo(self, endereo: str):
        """Sets the endereo of this Imovel.


        :param endereo: The endereo of this Imovel.
        :type endereo: str
        """
        if endereo is None:
            raise ValueError("Invalid value for `endereo`, must not be `None`")  # noqa: E501
        if endereo is not None and len(endereo) > 250:
            raise ValueError("Invalid value for `endereo`, length must be less than or equal to `250`")  # noqa: E501

        self._endereo = endereo

    @property
    def description(self) -> str:
        """Gets the description of this Imovel.


        :return: The description of this Imovel.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Imovel.


        :param description: The description of this Imovel.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501
        if description is not None and len(description) > 250:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `250`")  # noqa: E501

        self._description = description

    @property
    def status(self) -> str:
        """Gets the status of this Imovel.


        :return: The status of this Imovel.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Imovel.


        :param status: The status of this Imovel.
        :type status: str
        """
        allowed_values = ["Ativo", "Inativo"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def caracteristicas(self) -> str:
        """Gets the caracteristicas of this Imovel.


        :return: The caracteristicas of this Imovel.
        :rtype: str
        """
        return self._caracteristicas

    @caracteristicas.setter
    def caracteristicas(self, caracteristicas: str):
        """Sets the caracteristicas of this Imovel.


        :param caracteristicas: The caracteristicas of this Imovel.
        :type caracteristicas: str
        """
        if caracteristicas is not None and len(caracteristicas) > 500:
            raise ValueError("Invalid value for `caracteristicas`, length must be less than or equal to `500`")  # noqa: E501

        self._caracteristicas = caracteristicas

    @property
    def tipo(self) -> str:
        """Gets the tipo of this Imovel.


        :return: The tipo of this Imovel.
        :rtype: str
        """
        return self._tipo

    @tipo.setter
    def tipo(self, tipo: str):
        """Sets the tipo of this Imovel.


        :param tipo: The tipo of this Imovel.
        :type tipo: str
        """
        allowed_values = ["Apartamento", "Casa"]  # noqa: E501
        if tipo not in allowed_values:
            raise ValueError(
                "Invalid value for `tipo` ({0}), must be one of {1}"
                .format(tipo, allowed_values)
            )

        self._tipo = tipo

    @property
    def finalidade(self) -> str:
        """Gets the finalidade of this Imovel.


        :return: The finalidade of this Imovel.
        :rtype: str
        """
        return self._finalidade

    @finalidade.setter
    def finalidade(self, finalidade: str):
        """Sets the finalidade of this Imovel.


        :param finalidade: The finalidade of this Imovel.
        :type finalidade: str
        """
        allowed_values = ["Residencial", "Escritório"]  # noqa: E501
        if finalidade not in allowed_values:
            raise ValueError(
                "Invalid value for `finalidade` ({0}), must be one of {1}"
                .format(finalidade, allowed_values)
            )

        self._finalidade = finalidade

    @property
    def idimobiliaria(self) -> int:
        """Gets the idimobiliaria of this Imovel.


        :return: The idimobiliaria of this Imovel.
        :rtype: int
        """
        return self._idimobiliaria

    @idimobiliaria.setter
    def idimobiliaria(self, idimobiliaria: int):
        """Sets the idimobiliaria of this Imovel.


        :param idimobiliaria: The idimobiliaria of this Imovel.
        :type idimobiliaria: int
        """
        if idimobiliaria is None:
            raise ValueError("Invalid value for `idimobiliaria`, must not be `None`")  # noqa: E501

        self._idimobiliaria = idimobiliaria
